- name: Append cgroup settings to cmdline.txt only if absent
  become: true
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: '^(?!.*cgroup_memory=1.*cgroup_enable=memory)(.*)$'
    line: '\1 cgroup_memory=1 cgroup_enable=memory'
    backrefs: yes
    state: present
  notify: Reboot

- meta: flush_handlers  # Ensures the Reboot handler runs immediately if notified

- name: Download K3S installer
  get_url:
    url: "{{ k3s.url }}"
    dest: "{{ k3s.tmpfile }}"
    mode: "0777"

- name: Execute the K3S Installer
  when: "'K3sAdmin' is in group_names"
  shell: "{{ k3s.tmpfile }} {{ k3s.args | join(' ')}}"

- name: Get K3S Node Token
  become: true
  run_once: true
  delegate_to: "{{ groups['K3sAdmin'][0] }}"
  shell: cat {{ k3s.nodetoken }}
  register: nodetoken

- name: Join K3s Cluster as Node
  when: "'K3sNode' is in group_names"
  shell: |
    export K3S_URL=https://{{ hostvars[groups['K3sAdmin'][0]]['ansible_default_ipv4']['address'] }}:6443
    export K3S_TOKEN={{ nodetoken.stdout }}
    {{ k3s.tmpfile }}

- name: Remove the K3S Installer
  file:
    path: "{{ k3s.tmpfile }}"
    state: absent

- name: Get K3S Kubeconfig
  when: "'K3sAdmin' is in group_names"
  become: true
  run_once: true
  fetch:
    src: "{{ k3s.kubeconfig }}"
    dest: "{{ k3s.local_kubeconfig }}"
    flat: yes
  tags: get-kubeconfig

- name: Update Local Ansible Host Kubeconfig with multiple replacements
  delegate_to: localhost
  run_once: true
  replace:
    path: "{{ k3s.local_kubeconfig }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop:
    - { regexp: '127\.0\.0\.1', replace: "{{ k3s.domain | default(hostvars[groups['K3sAdmin'][0]]['ansible_default_ipv4']['address']) }}" }
    - { regexp: '\bdefault\b', replace: "{{ k3s.domain | default('k3s') }}" }
  tags: get-kubeconfig

- name: Decode the CA certificate from Kubeconfig
  delegate_to: localhost
  run_once: true
  shell: "cat {{ k3s.local_kubeconfig }} | grep 'certificate-authority-data' | awk '{print $2}' | base64 --decode > /tmp/ca.crt"
  args:
    executable: /bin/bash
  tags: get-kubeconfig

- name: Download K9s binary for ARM64
  when: "'K3sAdmin' is in group_names"
  become: true
  get_url:
    url: "https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_arm64.tar.gz"
    dest: "/tmp/k9s.tar.gz"
  tags: k9s

- name: Extract K9s binary
  when: "'K3sAdmin' is in group_names"
  become: true
  unarchive:
    src: "/tmp/k9s.tar.gz"
    dest: "/usr/local/bin/"
    remote_src: yes
    extra_opts: [--no-same-owner]
  tags: k9s

- name: Ensure K9s binary is executable
  when: "'K3sAdmin' is in group_names"
  become: true
  file:
    path: "/usr/local/bin/k9s"
    mode: '0755'
    state: file
  tags: k9s

- name: Notify
  run_once: true
  debug:
    msg: 
      - To use the K3S cluster with Lense App, run the command below
      - sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/ca.crt
  tags: get-kubeconfig